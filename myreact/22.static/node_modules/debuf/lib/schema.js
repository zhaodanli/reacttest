
var Rule = require('./rule');


function Schema(ruleDefs) {
  this.size       = null;
  this.data       = {};
  this.isResolved = false;
  this._rules = [];

  var rule = null;
  for (var i = 0; i < ruleDefs.length; i += 1) {
    rule = new Rule(ruleDefs[i], rule);
    this._rules.push(rule);
  }
}

Schema.prototype.encode = function(buf, data, offset) {
  offset || (offset = 0);

  for (var i = 0; i < this._rules.length; i += 1) {
    var rule = this._rules[i];

    if (rule.isResolved) { continue; }

    var val = undefined;
    if (!rule.isSizeRule) {
      val = this._getValAtPath(data, rule.key);
    }

    if (!rule.encode(buf, val, offset)) { return false; }

    if (rule.isSizeRule) { continue; }

    this._setValAtPath(this.data, rule.val, rule.key);
  }

  this.isResolved = true;
  this.size       = rule.offset + rule.size;

  return true;
};

Schema.prototype.decode = function(buf, offset) {
  offset || (offset = 0);

  for (var i = 0; i < this._rules.length; i += 1) {
    var rule = this._rules[i];

    if (rule.isResolved) { continue; }

    if (!rule.decode(buf, offset)) { return false; }

    if (rule.isSizeRule) { continue; }

    this._setValAtPath(this.data, rule.val, rule.key);
  }

  this.isResolved = true;
  this.size       = rule.offset + rule.size;

  return true;
};

Schema.prototype._getValAtPath = function(obj, path) {
  var ctx        = obj;
  var pathChunks = path.split('.');
  for (var i = 0; i < pathChunks.length; i += 1) {
    if (typeof ctx !== 'object') { return; }
    ctx = ctx[pathChunks[i]];
  }
  return ctx;
};

Schema.prototype._setValAtPath = function(obj, val, path) {
  var ctx        = obj;
  var pathChunks = path.split('.');
  var prop       = pathChunks.pop();
  for (var i = 0; i < pathChunks.length; i += 1) {
    if (typeof ctx[pathChunks[i]] !== 'object') {
      ctx[pathChunks[i]] = {};
    }
    ctx = ctx[pathChunks[i]];
  }
  return ctx[prop] = val;
};

Schema.prototype.reset = function() {
  for (var i = 0; i < this._rules.length; i += 1) {
    this._rules[i].reset();
  }

  this.isResolved = false;
  this.size       = null;
  this.data       = {};
};


module.exports = Schema;
