
var inherits = require('util').inherits;
var Readable = require('stream').Readable;
var Schema   = require('./schema');


function Encoder(ruleDefs, data) {
  Readable.call(this);

  if (typeof ruleDefs !== 'object' || typeof ruleDefs.length !== 'number') {
    throw new Error('ruleDefs must be an array');
  }
  if (typeof data !== 'object') {
    throw new Error('data must be an object');
  }

  this.data          = null;
  this.isResolved    = false;
  this._bufferCursor = 0;
  this._bufferOffset = 0;
  this._data         = data;
  this._schema       = new Schema(ruleDefs);
  this._buffer       = new Buffer(Encoder.defaultBufferSize);
}
inherits(Encoder, Readable);

Encoder.defaultBufferSize = 64;

Encoder.prototype._read = function() {
  while (!this._schema.encode(this._buffer, this._data, 0)) {
    this._expandBuffer();
  };

  this.data       = this._schema.data;
  this.isResolved = this._schema.isResolved;

  this.push(this._buffer.slice(0, this._schema.size));
  this.push(null);
};

Encoder.prototype._expandBuffer = function() {
  var buffer = new Buffer(this._buffer.length * 2);
  this._buffer.copy(buffer, 0);
  this._buffer = buffer;
};

module.exports = Encoder;
