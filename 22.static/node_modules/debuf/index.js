
var Schema  = require('./lib/schema');
var Decoder = require('./lib/decoder');
var Encoder = require('./lib/encoder');
var Rule    = require('./lib/rule');

function binaryStreamToObject(schema, cb) {
  cb || (cb = function() {});

  var decoder = new Decoder(schema);

  decoder.on('error', function(err) {
    cb(err);
  });
  decoder.on('finish', function() {
    cb(null, decoder.data);
  });

  return decoder;
};

function objectToBinaryStream(data, schema) {
  return new Encoder(schema, data);
};

function bufferToObject(buf, schema, cb) {
  cb || (cb = function() {});

  var decoder = new Decoder(schema);

  decoder.on('error', function(err) {
    cb(err);
  });
  decoder.on('finish', function() {
    cb(null, decoder.data);
  });

  decoder.end(buf);
}

function objectToBuffer(data, schema, cb) {
  cb || (cb = function() {});

  var encoder = new Encoder(schema, data);
  var chunks  = [];
  var buf;

  encoder.on('error', function(err) { cb(err); });

  encoder.on('data',  function(chunk) { chunks.push(chunk); });
  encoder.on('end',   function() { cb(null, Buffer.concat(chunks)); });
}

function registerType(typeName, type) {
  Rule.types[typeName] = type;
}


exports.stream = {
  toObject   : binaryStreamToObject,
  fromObject : objectToBinaryStream
};
exports.buffer = {
  toObject   : bufferToObject,
  fromObject : objectToBuffer
};
exports.registerType = registerType;
exports.Schema       = Schema;
exports.Rule         = Rule;
exports.Decoder      = Decoder;
exports.Encoder      = Encoder;
